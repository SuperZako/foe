var gameId = 'figure-of-eight';

// Generated by CoffeeScript 1.7.1
(function () {
    var A, Actor, ActorGroup, Blt, Bonus, C, Color, Config, D, Display, Drawing, DrawingRect, En, Fiber, G, Game, Key, Leaderboard, Letter, M, Mouse, P, PI, Particle, ParticleActor, Player, R, Random, S, Shot, Sound, Star, T, Text, TextActor, V, Vector, abs, atan2, begin, beginGame, ceil, cos, endGame, floor, initialize, max, min, requestAnimFrame, sin, sqrt, update,
        __slice = [].slice,
        __hasProp = {}.hasOwnProperty,
        __extends = function (child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

    window.onload = function () {
        return Game.initialize();
    };

    Function.prototype.getter = function (prop, get) {
        return Object.defineProperty(this.prototype, prop, {
            get: get,
            configurable: true
        });
    };

    Function.prototype.classGetter = function (prop, get) {
        return Object.defineProperty(this, prop, {
            get: get,
            configurable: true
        });
    };

    Game = (function () {
        function Game() { }

        Game.initialize = function () {
            var ca;
            this.t = 0;
            this.sc = 0;
            this.ig = false;
            this.r = new Random;
            this.INTERVAL = 1000 / Config.fps;
            this.delta = 0;
            this.currentTime = this.prevTime = 0;
            this.isPaused = false;
            Display.initialize();
            Key.initialize();
            Mouse.initialize();
            Sound.initialize();
            window.onblur = (function (_this) {
                return function (e) {
                    _this.isPaused = true;
                    Display.clear();
                    return Display.drawText('PAUSED', 0.5, 0.5, 0, 0);
                };
            })(this);
            window.onfocus = (function (_this) {
                return function (e) {
                    return _this.onfocus();
                };
            })(this);
            ca = Config.captureArgs;
            if (ca != null) {
                Display.beginCapture.apply(Display, ca);
            }
            initialize();
            if (Config.isDebuggingMode) {
                this.beginGame();
            } else {
                this.initializeGame();
                this.beginTitle();
            }
            return requestAnimFrame(this.updateFrame);
        };

        Game.onfocus = function () {
            if (!this.isPaused) {
                return;
            }
            this.isPaused = false;
            return this.postUpdate();
        };

        Game.beginTitle = function () {
            var ty;
            this.ig = false;
            ty = Config.title.length === 1 ? .4 : .35;
            new Text(Config.title[0]).xy(.5, ty).sc(3).tf;
            if (Config.title.length > 1) {
                new Text(Config.title[1]).xy(.5, .45).sc(3).tf;
            }
            new Text('[ CLICK / TOUCH ] TO START').xy(.5, .6).tf;
            return Mouse.setPressedDisabledCount(10);
        };

        Game.beginGame = function () {
            this.ig = true;
            this.sc = 0;
            beginGame();
            return this.initializeGame();
        };

        Game.initializeGame = function () {
            Actor.clear();
            Sound.reset();
            this.fibers = [];
            this.t = 0;
            return begin();
        };

        Game.updateTitle = function () {
            if (Mouse.ipd) {
                return this.beginGame();
            }
        };

        Game.preUpdate = function (time) {
            if (time != null) {
                this.currentTime = time;
            } else {
                this.currentTime = (new Date).getTime();
            }
            this.delta += (this.currentTime - this.prevTime) / this.INTERVAL;
            this.prevTime = this.currentTime;
            if (this.delta >= 0.75) {
                return true;
            }
            requestAnimFrame(this.updateFrame);
            return false;
        };

        Game.postUpdate = function () {
            this.delta = 0;
            return requestAnimFrame(this.updateFrame);
        };

        Game.updateFrame = function (time) {
            var f, _i, _len, _ref;
            if (Game.isPaused) {
                return;
            }
            if (!Game.preUpdate(time)) {
                return;
            }
            Display.preUpdate();
            Mouse.update();
            update();
            Actor.update();
            Sound.update();
            _ref = Game.fibers;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                f = _ref[_i];
                f.update();
            }
            Display.drawText("" + Game.sc, 1, 0, 1);
            Game.postUpdate();
            Game.t++;
            if (!Game.ig) {
                return Game.updateTitle();
            }
        };

        Game.classGetter('eg', function () {
            if (!this.ig) {
                return false;
            }
            endGame();
            this.beginTitle();
            return true;
        });

        Game.dt = function () {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return Display.drawText.apply(Display, args);
        };

        Game.fr = function () {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return Display.fillRect.apply(Display, args);
        };

        Game.df = function (r) {
            if (r == null) {
                r = 1;
            }
            return (sqrt(this.t * r / (60 * 60 * 3))) + 1;
        };

        Game.classGetter('fi', function () {
            var f;
            f = new Fiber;
            this.fibers.push(f);
            return f;
        });

        return Game;

    })();

    requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        return window.setTimeout(callback, Game.INTERVAL / 2);
    };

    Actor = (function () {
        Actor.clear = function () {
            return this.groups = [];
        };

        Actor.update = function () {
            var g, _i, _len, _ref;
            _ref = this.groups;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                g = _ref[_i];
                g.update();
            }
        };

        Actor.sortGroups = function () {
            return this.groups.sort(function (v1, v2) {
                return v1.displayPriority - v2.displayPriority;
            });
        };

        Actor.s = function (cls) {
            var className, g, _i, _len, _ref;
            className = ('' + cls).replace(/^\s*function\s*([^\(]*)[\S\s]+$/im, '$1');
            _ref = this.groups;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                g = _ref[_i];
                if (g.name === className) {
                    return g.s;
                }
            }
            return [];
        };

        Actor.sc = function (classes, ox, oy, minX, maxX, minY, maxY) {
            var a, actors, cls, _i, _len, _results;
            if (oy == null) {
                oy = 0;
            }
            if (minX == null) {
                minX = 0;
            }
            if (maxX == null) {
                maxX = 0;
            }
            if (minY == null) {
                minY = 0;
            }
            if (maxY == null) {
                maxY = 0;
            }
            _results = [];
            for (_i = 0, _len = classes.length; _i < _len; _i++) {
                cls = classes[_i];
                actors = this.s(cls);
                _results.push((function () {
                    var _j, _len1, _results1;
                    _results1 = [];
                    for (_j = 0, _len1 = actors.length; _j < _len1; _j++) {
                        a = actors[_j];
                        a.p.x += ox;
                        a.p.y += oy;
                        if (minX < maxX) {
                            a.p.x = a.p.x.lr(minX, maxX);
                        }
                        if (minY < maxY) {
                            _results1.push(a.p.y = a.p.y.lr(minY, maxY));
                        } else {
                            _results1.push(void 0);
                        }
                    }
                    return _results1;
                })());
            }
            return _results;
        };

        function Actor() {
            var args, className, g, _i, _len, _ref;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            this.p = new Vector;
            this.v = new Vector;
            this.w = 0;
            this.s = 0;
            this.t = 0;
            this.d = new Drawing;
            this.fibers = [];
            this.isRemoving = false;
            className = ('' + this.constructor).replace(/^\s*function\s*([^\(]*)[\S\s]+$/im, '$1');
            _ref = Actor.groups;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                g = _ref[_i];
                if (g.name === className) {
                    this.group = g;
                    break;
                }
            }
            if (this.group == null) {
                this.group = new ActorGroup(className);
                Actor.groups.push(this.group);
                Actor.sortGroups();
                this.i();
            }
            this.group.s.push(this);
            this.b.apply(this, args);
        }

        Actor.prototype.preUpdate = function () {
            this.p.a(this.v);
            this.p.aw(this.w, this.s);
            return this.d.p(this.p).w(this.w).d;
        };

        Actor.prototype.postUpdate = function () {
            var f, _i, _len, _ref;
            _ref = this.fibers;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                f = _ref[_i];
                f.update();
            }
            return this.t++;
        };

        Actor.prototype.remove = function () {
            return this.r;
        };

        Actor.getter('r', function () {
            return this.isRemoving = true;
        });

        Actor.prototype.dp = function (displayPriority) {
            this.group.displayPriority = displayPriority;
            return Actor.sortGroups();
        };

        Actor.prototype.ih = function (cls, fn) {
            var hca, hitCheckActors, isHit, _i, _len;
            if (fn == null) {
                fn = null;
            }
            isHit = false;
            hitCheckActors = Actor.s(cls);
            for (_i = 0, _len = hitCheckActors.length; _i < _len; _i++) {
                hca = hitCheckActors[_i];
                if (this.d.ih(hca.d)) {
                    isHit = true;
                    if (typeof fn === "function") {
                        fn(hca);
                    }
                }
            }
            return isHit;
        };

        Actor.getter('fi', function () {
            var f;
            f = new Fiber;
            f.a = this;
            this.fibers.push(f);
            return f;
        });

        Actor.getter('pi', function () {
            var p;
            p = new Particle;
            p.p(this.p);
            return p;
        });

        Actor.prototype.ti = function (text) {
            var t;
            t = new Text(text);
            t.p(this.p);
            return t;
        };

        Actor.prototype.i = function () { };

        Actor.prototype.b = function () {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        };

        Actor.prototype.u = function () { };

        return Actor;

    })();

    ActorGroup = (function () {
        function ActorGroup(name) {
            this.name = name;
            this.s = [];
            this.displayPriority = 1;
        }

        ActorGroup.prototype.update = function () {
            var a, i, _i, _len, _ref;
            _ref = this.s;
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                a = _ref[i];
                if (i >= this.s.length) {
                    break;
                }
                if (!a.isRemoving) {
                    a.preUpdate();
                    a.u();
                }
                if (a.isRemoving) {
                    this.s.splice(i--, 1);
                } else {
                    a.postUpdate();
                }
            }
        };

        return ActorGroup;

    })();

    Drawing = (function () {
        Drawing.classGetter('i', function () {
            return new Drawing;
        });

        function Drawing() {
            this.s = [];
            this.pos = new Vector;
            this.way = 0;
            this.scale = new Vector(1, 1);
        }

        Drawing.prototype.addRect = function () {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return this.ar.apply(this, args);
        };

        Drawing.prototype.ar = function (color, width, height, ox, oy) {
            if (height == null) {
                height = 0;
            }
            if (ox == null) {
                ox = 0;
            }
            if (oy == null) {
                oy = 0;
            }
            if (height === 0) {
                height = width;
            }
            this.s.push(new DrawingRect(color, width, height, ox, oy));
            return this;
        };

        Drawing.prototype.ars = function (color, width, height, ox, oy) {
            var i, n, vox, voy, _i;
            if (ox == null) {
                ox = 0;
            }
            if (oy == null) {
                oy = 0;
            }
            if (width > height) {
                n = floor(width / height);
                vox = height;
                voy = 0;
                ox -= height * (n - 1) / 2;
                width = height;
            } else {
                n = floor(height / width);
                vox = 0;
                voy = width;
                oy -= width * (n - 1) / 2;
                height = width;
            }
            for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
                this.s.push(new DrawingRect(color, width, height, ox, oy));
                ox += vox;
                oy += voy;
            }
            return this;
        };

        Drawing.prototype.p = function (p) {
            this.pos.v(p);
            return this;
        };

        Drawing.prototype.xy = function (x, y) {
            this.pos.xy(x, y);
            return this;
        };

        Drawing.prototype.w = function (w) {
            this.way = w;
            return this;
        };

        Drawing.prototype.sc = function (x, y) {
            if (y == null) {
                y = -9999999;
            }
            if (y === -9999999) {
                y = x;
            }
            this.scale.xy(x, y);
            return this;
        };

        Drawing.getter('d', function () {
            var r, _i, _len, _ref;
            _ref = this.s;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                r = _ref[_i];
                r.draw(this);
            }
            return this;
        });

        Drawing.getter('st', function () {
            var r, _i, _len, _ref;
            _ref = this.s;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                r = _ref[_i];
                r.set(this);
            }
            return this;
        });

        Drawing.prototype.ih = function (d) {
            var dr, isHit, r, _i, _j, _len, _len1, _ref, _ref1;
            isHit = false;
            _ref = this.s;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                r = _ref[_i];
                _ref1 = d.s;
                for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                    dr = _ref1[_j];
                    if (r.isHit(dr)) {
                        isHit = true;
                    }
                }
            }
            return isHit;
        };

        return Drawing;

    })();

    DrawingRect = (function () {
        function DrawingRect(color, width, height, ox, oy) {
            this.color = color;
            this.size = new Vector(width, height);
            this.offset = new Vector(ox, oy);
            this.currentPos = new Vector;
            this.currentSize = new Vector;
        }

        DrawingRect.prototype.set = function (d) {
            this.currentPos.v(this.offset);
            this.currentPos.x *= d.scale.x;
            this.currentPos.y *= d.scale.y;
            this.currentPos.rt(d.way);
            this.currentPos.a(d.pos);
            return this.currentSize.xy(this.size.x * d.scale.x, this.size.y * d.scale.y);
        };

        DrawingRect.prototype.draw = function (d) {
            this.set(d);
            return Display.fillRect(this.currentPos.x, this.currentPos.y, this.currentSize.x, this.currentSize.y, this.color);
        };

        DrawingRect.prototype.isHit = function (r) {
            return (abs(this.currentPos.x - r.currentPos.x)) < (this.currentSize.x + r.currentSize.x) / 2 && (abs(this.currentPos.y - r.currentPos.y)) < (this.currentSize.y + r.currentSize.y) / 2;
        };

        return DrawingRect;

    })();

    Fiber = (function () {
        function Fiber() {
            this.funcs = [];
            this.funcIndex = 0;
        }

        Fiber.prototype.dr = function (func) {
            this.funcs.push(func);
            return this;
        };

        Fiber.prototype.d = function (func) {
            this.funcs.push((function (_this) {
                return function () {
                    func.call(_this);
                    return _this.n;
                };
            })(this));
            return this;
        };

        Fiber.prototype.w = function (count) {
            this.funcs.push((function (_this) {
                return function () {
                    _this.count = count;
                    return _this.n;
                };
            })(this));
            this.funcs.push((function (_this) {
                return function () {
                    if (--_this.count < 0) {
                        return _this.n;
                    }
                };
            })(this));
            return this;
        };

        Fiber.getter('n', function () {
            if (++this.funcIndex >= this.funcs.length) {
                this.funcIndex = 0;
            }
            return this;
        });

        Fiber.prototype.update = function () {
            return this.funcs[this.funcIndex].call(this);
        };

        return Fiber;

    })();

    Color = (function () {
        function Color(r, g, b) {
            this.r = r;
            this.g = g;
            this.b = b;
        }

        Color.di = new Color(0, 0, 0);

        Color.ri = new Color(1, 0, 0);

        Color.gi = new Color(0, 1, 0);

        Color.bi = new Color(0, 0, 1);

        Color.yi = new Color(1, 1, 0);

        Color.mi = new Color(1, 0, 1);

        Color.ci = new Color(0, 1, 1);

        Color.wi = new Color(1, 1, 1);

        Color.prototype.toString = function () {
            var b, g, r, v0, v1;
            v1 = 250;
            v0 = 0;
            r = floor(this.r * v1 + v0);
            g = floor(this.g * v1 + v0);
            b = floor(this.b * v1 + v0);
            return "rgb(" + r + "," + g + "," + b + ")";
        };

        return Color;

    })();

    Display = (function () {
        function Display() { }

        Display.initialize = function () {
            this.e = $('#display')[0];
            Letter.initialize();
            this.size = new Vector;
            this.setSize();
            return window.onresize = (function (_this) {
                return function () {
                    if (_this.resizeTimer != null) {
                        clearTimeout(_this.resizeTimer);
                    }
                    return _this.resizeTimer = setTimeout(_this.setSize, 200);
                };
            })(this);
        };

        Display.setSize = function () {
            var cw;
            cw = $('#displayDiv')[0].clientWidth;
            Display.e.width = Display.e.height = cw;
            Display.size.xy(cw, cw);
            Display.c = Display.e.getContext('2d');
            return Letter.setSize(Display.size);
        };

        Display.clear = function () {
            this.c.fillStyle = Config.backgroundColor;
            return this.c.fillRect(0, 0, this.size.x, this.size.y);
        };

        Display.drawText = function (text, x, y, alignX, alignY, color, scale) {
            if (alignX == null) {
                alignX = -1;
            }
            if (alignY == null) {
                alignY = -1;
            }
            if (color == null) {
                color = C.wi;
            }
            if (scale == null) {
                scale = 1;
            }
            return Letter.draw(text, x, y, alignX, alignY, color, scale);
        };

        Display.fillRect = function (x, y, width, height, color) {
            if (color == null) {
                color = C.wi;
            }
            this.c.fillStyle = color.toString();
            return this.c.fillRect(floor((x - width / 2) * this.size.x), floor((y - height / 2) * this.size.y), floor(width * this.size.x), floor(height * this.size.y));
        };

        Display.fillRectDirect = function (x, y, width, height, color) {
            if (color == null) {
                color = C.wi;
            }
            this.c.fillStyle = color.toString();
            return this.c.fillRect(x, y, width, height);
        };

        Display.beginCapture = function (scale, durationSec, intervalSec) {
            var ctx, cvs, i, _i, _ref;
            if (scale == null) {
                scale = 1;
            }
            if (durationSec == null) {
                durationSec = 3;
            }
            if (intervalSec == null) {
                intervalSec = 0.1;
            }
            this.captureDuration = floor(durationSec / intervalSec);
            this.captureInterval = floor(intervalSec * 1000);
            this.captureIntervalTick = floor(intervalSec * Config.fps);
            this.captureContexts = [];
            this.isCaptured = [];
            for (i = _i = 1, _ref = this.captureDuration; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
                cvs = document.createElement('canvas');
                cvs.width = this.size.x * scale;
                cvs.height = this.size.y * scale;
                ctx = cvs.getContext("2d");
                ctx.scale(scale, scale);
                this.captureContexts.push(ctx);
                this.isCaptured.push(false);
            }
            this.captureCanvasIndex = 0;
            this.isEndCapturing = false;
            return this.isCapturing = true;
        };

        Display.capture = function () {
            this.captureContexts[this.captureCanvasIndex].drawImage(this.e, 0, 0);
            this.isCaptured[this.captureCanvasIndex] = true;
            return this.captureCanvasIndex = (this.captureCanvasIndex + 1).lr(0, this.captureDuration);
        };

        Display.endCapture = function () {
            var binaryGif, encoder, i, idx, _i, _ref;
            this.isCapturing = false;
            encoder = new GIFEncoder();
            encoder.setRepeat(0);
            encoder.setDelay(this.captureInterval);
            encoder.start();
            idx = this.captureCanvasIndex;
            for (i = _i = 1, _ref = this.captureDuration; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
                if (this.isCaptured[idx]) {
                    encoder.addFrame(this.captureContexts[idx]);
                }
                idx = (idx + 1).lr(0, this.captureDuration);
            }
            encoder.finish();
            binaryGif = encoder.stream().getData();
            return window.location.href = 'data:image/gif;base64,' + (encode64(binaryGif));
        };

        Display.preUpdate = function () {
            if (this.isEndCapturing) {
                this.endCapture();
            }
            if (this.isCapturing && G.t % this.captureIntervalTick === 0) {
                this.capture();
            }
            this.clear();
            if (this.isCapturing && Key.s[67]) {
                this.drawText('CAPTURING...', .5, .5, 0);
                return this.isEndCapturing = true;
            }
        };

        return Display;

    })();

    Letter = (function () {
        function Letter() { }

        Letter.initialize = function () {
            var c, charStr, ci, d, dots, i, j, k, li, p, pIndex, patterns, _i, _j, _k, _l, _ref, _results;
            this.COUNT = 66;
            patterns = [0x4644AAA4, 0x6F2496E4, 0xF5646949, 0x167871F4, 0x2489F697, 0xE9669696, 0x79F99668, 0x91967979, 0x1F799976, 0x1171FF17, 0xF99ED196, 0xEE444E99, 0x53592544, 0xF9F11119, 0x9DDB9999, 0x79769996, 0x7ED99611, 0x861E9979, 0x994444E7, 0x46699699, 0x6996FD99, 0xF4469999, 0x2224F248, 0x26244424, 0x64446622, 0x84284248, 0x40F0F024, 0x0F0044E4, 0x480A4E40, 0x9A459124, 0x000A5A16, 0x640444F0, 0x80004049, 0x40400004, 0x44444040, 0x0AA00044, 0x6476E400, 0xFAFA61D9, 0xE44E4EAA, 0x24F42445, 0xF244E544, 0x00000042];
            p = 0;
            d = 32;
            pIndex = 0;
            this.dotPatterns = [];
            for (i = _i = 1, _ref = this.COUNT; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
                dots = [];
                for (j = _j = 1; _j <= 5; j = ++_j) {
                    for (k = _k = 1; _k <= 4; k = ++_k) {
                        if (++d >= 32) {
                            p = patterns[pIndex++];
                            d = 0;
                        }
                        if (p & 1 > 0) {
                            dots.push(new Vector().xy(k, j));
                        }
                        p >>= 1;
                    }
                }
                this.dotPatterns.push(dots);
            }
            charStr = "()[]<>=+-*/%&_!?,.:|'\"$@#\\urdl";
            this.charToIndex = [];
            _results = [];
            for (c = _l = 0; _l <= 127; c = ++_l) {
                li = c === 32 ? -1 : (48 <= c && c < 58) ? c - 48 : (65 <= c && c < 90) ? c - 65 + 10 : (ci = charStr.indexOf(String.fromCharCode(c)), ci >= 0 ? ci + 36 : -2);
                _results.push(this.charToIndex.push(li));
            }
            return _results;
        };

        Letter.setSize = function (size) {
            return this.baseDotSize = floor((min(size.x, size.y)) / 250 + 1).c(1, 20);
        };

        Letter.draw = function (text, x, y, xAlign, yAlign, color, scale) {
            var c, li, lw, size, tx, ty, _i, _len;
            tx = floor(x * Display.size.x);
            ty = floor(y * Display.size.y);
            size = this.baseDotSize * scale;
            lw = size * 5;
            if (xAlign === 0) {
                tx -= floor(text.length * lw / 2);
            } else if (xAlign === 1) {
                tx -= floor(text.length * lw);
            }
            if (yAlign === 0) {
                ty -= size * 3;
            }
            for (_i = 0, _len = text.length; _i < _len; _i++) {
                c = text[_i];
                li = this.charToIndex[c.charCodeAt(0)];
                if (li >= 0) {
                    this.drawDots(li, tx, ty, color, size);
                } else if (li === -2) {
                    throw "invalid char: " + c;
                }
                tx += lw;
            }
        };

        Letter.drawDots = function (li, x, y, color, size) {
            var p, _i, _len, _ref;
            _ref = this.dotPatterns[li];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                p = _ref[_i];
                Display.fillRectDirect(x + p.x * size, y + p.y * size, size, size, color);
            }
        };

        return Letter;

    })();

    Text = (function () {
        Text.addedTexts = [];

        Text.i = function (text) {
            return new Text(text);
        };

        function Text(text) {
            this.a = new TextActor;
            this.a.text = text;
        }

        Text.prototype.p = function (pos) {
            this.a.p.v(pos);
            return this;
        };

        Text.prototype.xy = function (x, y) {
            this.a.p.xy(x, y);
            return this;
        };

        Text.prototype.v = function (x, y) {
            this.a.v.xy(x, y);
            return this;
        };

        Text.prototype.t = function (removeTicks) {
            this.a.removeTicks = removeTicks;
            return this;
        };

        Text.prototype.c = function (color) {
            this.a.color = color;
            return this;
        };

        Text.prototype.sc = function (scale) {
            this.a.scale = scale;
            return this;
        };

        Text.getter('tf', function () {
            this.a.removeTicks = 9999999;
            return this;
        });

        Text.getter('al', function () {
            this.a.xAlign = -1;
            return this;
        });

        Text.getter('ar', function () {
            this.a.xAlign = 1;
            return this;
        });

        Text.getter('ao', function () {
            if ((Text.addedTexts.indexOf(this.a.text)) >= 0) {
                this.a.text = '';
                this.a.r;
            } else {
                Text.addedTexts.push(this.a.text);
            }
            return this;
        });

        return Text;

    })();

    TextActor = (function (_super) {
        __extends(TextActor, _super);

        function TextActor() {
            return TextActor.__super__.constructor.apply(this, arguments);
        }

        TextActor.prototype.i = function () {
            return this.dp(2);
        };

        TextActor.prototype.b = function () {
            this.removeTicks = 1;
            this.xAlign = 0;
            this.color = C.wi;
            return this.scale = 1;
        };

        TextActor.prototype.u = function () {
            if (this.t === 0) {
                this.p.s(this.v);
                this.v.d(this.removeTicks);
            }
            Display.drawText(this.text, this.p.x, this.p.y, this.xAlign, 0, this.color, this.scale);
            if (this.t >= this.removeTicks) {
                return this.r;
            }
        };

        return TextActor;

    })(Actor);

    Particle = (function () {
        Particle.classGetter('i', function () {
            return new Particle;
        });

        function Particle() {
            this.a = new ParticleActor;
            this.a.particle = this;
            this.count = 1;
            this.way = 0;
            this.wayWidth = 360;
            this.speed = 0.01;
            this.color = Color.wi;
            this.size = 0.02;
            this.removeTicks = 30;
        }

        Particle.prototype.p = function (pos) {
            this.pos = pos;
            return this;
        };

        Particle.prototype.xy = function (x, y) {
            this.pos = new Vector().xy(x, y);
            return this;
        };

        Particle.prototype.cn = function (count) {
            this.count = count;
            return this;
        };

        Particle.prototype.w = function (way, wayWidth) {
            this.way = way;
            this.wayWidth = wayWidth;
            return this;
        };

        Particle.prototype.s = function (speed) {
            this.speed = speed;
            return this;
        };

        Particle.prototype.c = function (color) {
            this.color = color;
            return this;
        };

        Particle.prototype.sz = function (size) {
            this.size = size;
            return this;
        };

        Particle.prototype.t = function (removeTicks) {
            this.removeTicks = removeTicks;
            return this;
        };

        return Particle;

    })();

    ParticleActor = (function (_super) {
        __extends(ParticleActor, _super);

        function ParticleActor() {
            return ParticleActor.__super__.constructor.apply(this, arguments);
        }

        ParticleActor.prototype.i = function () {
            return this.dp(0);
        };

        ParticleActor.prototype.u = function () {
            var i, p, pp, ww, _i, _ref;
            if (this.particle != null) {
                pp = this.particle;
                ww = pp.wayWidth / 2;
                for (i = _i = 1, _ref = pp.count; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
                    p = new ParticleActor;
                    p.p.v(pp.pos);
                    p.v.aw(pp.way + ((-ww).rr(ww)), pp.speed * (0.5.rr(1.5)));
                    p.color = pp.color;
                    p.size = pp.size;
                    p.removeTicks = pp.removeTicks * (0.5.rr(1.5));
                }
                this.r;
                return;
            }
            Display.fillRect(this.p.x, this.p.y, this.size, this.size, this.color);
            if (this.t >= this.removeTicks) {
                return this.r;
            }
        };

        return ParticleActor;

    })(Actor);

    Mouse = (function () {
        function Mouse() { }

        Mouse.initialize = function () {
            this.p = new Vector;
            this.ip = this.ipd = this.wasPressing = false;
            this.pressedDisabledCount = 0;
            Display.e.addEventListener('mousedown', this.onMouseDown);
            Display.e.addEventListener('mousemove', this.onMouseMove);
            Display.e.addEventListener('mouseup', this.onMouseUp);
            Display.e.addEventListener('touchstart', this.onTouchStart);
            Display.e.addEventListener('touchmove', this.onTouchMove);
            return Display.e.addEventListener('touchend', this.onTouchEnd);
        };

        Mouse.onMouseMove = function (e) {
            var rect;
            e.preventDefault();
            rect = e.target.getBoundingClientRect();
            Mouse.p.x = (e.pageX - rect.left) / Display.size.x;
            return Mouse.p.y = (e.pageY - rect.top) / Display.size.y;
        };

        Mouse.onMouseDown = function (e) {
            Mouse.ip = true;
            Mouse.onMouseMove(e);
            return G.onfocus();
        };

        Mouse.onMouseUp = function (e) {
            return Mouse.ip = false;
        };

        Mouse.onTouchMove = function (e) {
            var rect, touch;
            e.preventDefault();
            rect = e.target.getBoundingClientRect();
            touch = e.touches[0];
            Mouse.p.x = (touch.pageX - rect.left) / Display.size.x;
            return Mouse.p.y = (touch.pageY - rect.top) / Display.size.y;
        };

        Mouse.onTouchStart = function (e) {
            Mouse.ip = true;
            Mouse.onTouchMove(e);
            return G.onfocus();
        };

        Mouse.onTouchEnd = function (e) {
            return Mouse.ip = false;
        };

        Mouse.update = function () {
            this.ipd = false;
            if (this.ip) {
                if (!this.wasPressing) {
                    if (this.pressedDisabledCount <= 0) {
                        this.ipd = true;
                    }
                }
            } else {
                this.pressedDisabledCount--;
            }
            return this.wasPressing = this.ip;
        };

        Mouse.setPressedDisabledCount = function (c) {
            this.pressedDisabledCount = c;
            return this.ipd = false;
        };

        return Mouse;

    })();

    Key = (function () {
        function Key() { }

        Key.initialize = function () {
            this.s = (function () {
                var _i, _results;
                _results = [];
                for (_i = 0; _i <= 255; _i++) {
                    _results.push(false);
                }
                return _results;
            })();
            window.onkeydown = (function (_this) {
                return function (e) {
                    var _ref;
                    _this.s[e.keyCode] = true;
                    if ((37 <= (_ref = e.keyCode) && _ref <= 40)) {
                        return e.preventDefault();
                    }
                };
            })(this);
            return window.onkeyup = (function (_this) {
                return function (e) {
                    return _this.s[e.keyCode] = false;
                };
            })(this);
        };

        return Key;

    })();

    Sound = (function () {
        Sound.initialize = function () {
            var error;
            try {
                this.c = new AudioContext();
                this.gn = Sound.c.createGain();
                this.gn.gain.value = Config.soundVolume;
                this.gn.connect(Sound.c.destination);
                this.isEnabled = true;
            } catch (_error) {
                error = _error;
                this.isEnabled = false;
            }
            this.playInterval = 60 / Config.soundTempo;
            this.scheduleInterval = 1 / Config.fps * 2;
            return this.clear();
        };

        Sound.clear = function () {
            return this.s = [];
        };

        Sound.reset = function () {
            var s, _i, _len, _ref, _results;
            _ref = this.s;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                s = _ref[_i];
                _results.push(s.reset());
            }
            return _results;
        };

        Sound.update = function () {
            var ct, s, tt, _i, _len, _ref, _results;
            if (Game.isPaused || !Game.ig || !this.isEnabled) {
                return;
            }
            ct = this.c.currentTime;
            tt = ct + this.scheduleInterval;
            _ref = this.s;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                s = _ref[_i];
                _results.push(s.update(ct, tt));
            }
            return _results;
        };

        Sound.i = function (param) {
            var s;
            s = new Sound(param);
            this.s.push(s);
            return s;
        };

        function Sound(param) {
            if (!Sound.isEnabled) {
                return;
            }
            this.buffer = WebAudiox.getBufferFromJsfx(Sound.c, param);
            this;
        }

        Sound.prototype.reset = function () {
            return this.isPlayingOnce = this.isPlayingLoop = null;
        };

        Sound.prototype.pp = function (pattern, patternInterval) {
            this.pattern = pattern;
            this.patternInterval = patternInterval != null ? patternInterval : .25;
            if (!Game.ig || !Sound.isEnabled) {
                return this;
            }
            this.isPlayingLoop = true;
            this.scheduledTime = null;
            return this;
        };

        Sound.getter('p', function () {
            if (!Game.ig || !Sound.isEnabled) {
                return this;
            }
            this.isPlayingOnce = true;
            return this;
        });

        Sound.getter('pn', function () {
            if (!Game.ig || !Sound.isEnabled) {
                return this;
            }
            this.play(0);
            return this;
        });

        Sound.prototype.update = function (ct, tt) {
            var pi, pt;
            if (this.isPlayingOnce != null) {
                this.isPlayingOnce = null;
                pi = Sound.playInterval;
                pt = ceil(ct / pi) * pi;
                if ((this.playedTime == null) || pt > this.playedTime) {
                    this.play(pt);
                    this.playedTime = pt;
                }
            }
            if (this.isPlayingLoop == null) {
                return;
            }
            if (this.scheduledTime == null) {
                this.scheduledTime = ceil(ct / Sound.playInterval) * Sound.playInterval - Sound.playInterval * this.patternInterval;
                this.patternIndex = 0;
                this.calcNextScheduledTime();
            }
            while (this.scheduledTime < ct) {
                this.calcNextScheduledTime();
            }
            while (this.scheduledTime <= tt) {
                this.play(this.scheduledTime);
                this.calcNextScheduledTime();
            }
        };

        Sound.prototype.calcNextScheduledTime = function () {
            var i, p, pn, sti, _i;
            pn = this.pattern.length;
            sti = Sound.playInterval * this.patternInterval;
            for (i = _i = 0; _i <= 99; i = ++_i) {
                this.scheduledTime += sti;
                p = this.pattern.charAt(this.patternIndex);
                this.patternIndex = (this.patternIndex + 1).lr(0, pn);
                if (p === '1') {
                    break;
                }
            }
        };

        Sound.prototype.play = function (delay) {
            var s;
            s = Sound.c.createBufferSource();
            s.buffer = this.buffer;
            s.connect(Sound.gn);
            s.start = s.start || s.noteOn;
            return s.start(delay);
        };

        return Sound;

    })();

    Random = (function () {
        Random.classGetter('i', function () {
            return new Random;
        });

        Random.prototype.r = function (from, to) {
            return this.n * (to - from) + from;
        };

        Random.prototype.ri = function (from, to) {
            return floor(this.r(from, to + 1));
        };

        Random.getter('pm', function () {
            return (this.ri(0, 1)) * 2 - 1;
        });

        function Random() {
            this.sd();
        }

        Random.prototype.sd = function (v) {
            var sv;
            if (v == null) {
                v = -0x7fffffff;
            }
            sv = v === -0x7fffffff ? floor(Math.random() * 0x7fffffff) : v;
            this.x = sv = 1812433253 * (sv ^ (sv >> 30));
            this.y = sv = 1812433253 * (sv ^ (sv >> 30)) + 1;
            this.z = sv = 1812433253 * (sv ^ (sv >> 30)) + 2;
            this.w = sv = 1812433253 * (sv ^ (sv >> 30)) + 3;
            return this;
        };

        Random.getter('n', function () {
            var t;
            t = this.x ^ (this.x << 11);
            this.x = this.y;
            this.y = this.z;
            this.z = this.w;
            this.w = (this.w ^ (this.w >> 19)) ^ (t ^ (t >> 8));
            return this.w / 0x7fffffff;
        });

        return Random;

    })();

    Vector = (function () {
        Vector.classGetter('i', function () {
            return new Vector;
        });

        function Vector(x, y) {
            this.x = x != null ? x : 0;
            this.y = y != null ? y : 0;
        }

        Vector.prototype.xy = function (x, y) {
            this.x = x != null ? x : 0;
            this.y = y != null ? y : 0;
            return this;
        };

        Vector.prototype.n = function (v) {
            if (v == null) {
                v = 0;
            }
            this.xy(v, v);
            return this;
        };

        Vector.prototype.v = function (v) {
            this.x = v.x;
            this.y = v.y;
            return this;
        };

        Vector.prototype.a = function (v) {
            this.x += v.x;
            this.y += v.y;
            return this;
        };

        Vector.prototype.s = function (v) {
            this.x -= v.x;
            this.y -= v.y;
            return this;
        };

        Vector.prototype.m = function (v) {
            this.x *= v;
            this.y *= v;
            return this;
        };

        Vector.prototype.d = function (v) {
            this.x /= v;
            this.y /= v;
            return this;
        };

        Vector.prototype.aw = function (way, speed) {
            var rw;
            rw = way * PI / 180;
            this.x += (sin(rw)) * speed;
            this.y -= (cos(rw)) * speed;
            return this;
        };

        Vector.prototype.rt = function (way) {
            var px, w;
            if (way === 0) {
                return;
            }
            w = way * PI / 180;
            px = this.x;
            this.x = this.x * (cos(w)) - this.y * (sin(w));
            this.y = px * (sin(w)) + this.y * (cos(w));
            return this;
        };

        Vector.prototype.dt = function (pos) {
            var ox, oy;
            ox = pos.x - this.x;
            oy = pos.y - this.y;
            return sqrt(ox * ox + oy * oy);
        };

        Vector.prototype.wt = function (pos) {
            return (atan2(pos.x - this.x, -(pos.y - this.y))) * 180 / PI;
        };

        Vector.prototype.ii = function (spacing, minX, maxX, minY, maxY) {
            var _ref, _ref1;
            if (spacing == null) {
                spacing = 0;
            }
            if (minX == null) {
                minX = 0;
            }
            if (maxX == null) {
                maxX = 1;
            }
            if (minY == null) {
                minY = 0;
            }
            if (maxY == null) {
                maxY = 1;
            }
            return (minX - spacing <= (_ref = this.x) && _ref <= maxX + spacing) && (minY - spacing <= (_ref1 = this.y) && _ref1 <= maxY + spacing);
        };

        Vector.getter('w', function () {
            return (atan2(this.x, -this.y)) * 180 / PI;
        });

        Vector.getter('l', function () {
            return sqrt(this.x * this.x + this.y * this.y);
        });

        return Vector;

    })();

    PI = Math.PI;

    sin = Math.sin;

    cos = Math.cos;

    atan2 = Math.atan2;

    abs = Math.abs;

    sqrt = Math.sqrt;

    floor = Math.floor;

    ceil = Math.ceil;

    max = Math.max;

    min = Math.min;

    Number.prototype.c = function (min, max) {
        if (min == null) {
            min = 0;
        }
        if (max == null) {
            max = 1;
        }
        if (this < min) {
            return min;
        } else if (this > max) {
            return max;
        } else {
            return this;
        }
    };

    Number.prototype.lr = function (min, max) {
        var v, w;
        if (min == null) {
            min = 0;
        }
        if (max == null) {
            max = 1;
        }
        w = max - min;
        v = this;
        v -= min;
        if (v >= 0) {
            return v % w + min;
        } else {
            return w + v % w + min;
        }
    };

    Number.prototype.rr = function (to) {
        if (to == null) {
            to = 1;
        }
        return Game.r.r(this, to);
    };

    Number.prototype.rri = function (to) {
        if (to == null) {
            to = 1;
        }
        return Game.r.ri(this, to);
    };

    A = Actor;

    C = Color;

    D = Drawing;

    G = Game;

    M = Mouse;

    P = Particle;

    R = Random;

    S = Sound;

    T = Text;

    V = Vector;

    Leaderboard = (function () {
        function Leaderboard() { }

        Leaderboard.initialize = function () {
            var divWidth;
            divWidth = $('section')[0].clientWidth - $('#display')[0].clientWidth;
            if (divWidth > 200 && !Config.isDebuggingMode) {
                window.onunload = (function (_this) {
                    return function () {
                        return _this.end();
                    };
                })(this);
                return this.begin();
            }
        };

        Leaderboard.begin = function () {
            this.leaderboardUrl = 'http://realtime-leaderboard-14.meteor.com';
            this.amplifyKey = gameId + '-PlayerId';
            this.isSockReady = false;
            this.getSetPlayerSendId = -1;
            this.isPlayerReady = false;
            this.isGameReady = false;
            this.idc = 0;
            this.sockReopenCount = 0;
            return this.openSock();
        };

        Leaderboard.end = function () {
            this.sockReopenCount = 999;
            return this.closeSock();
        };

        Leaderboard.openSock = function () {
            var sockParams;
            sockParams = {
                debug: false,
                protocols_whitelist: ['xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling']
            };
            this.sock = new SockJS(this.leaderboardUrl + '/sockjs', void 0, sockParams);
            this.sock.onopen = (function (_this) {
                return function () {
                    var conData;
                    conData = {
                        msg: 'connect',
                        version: 'pre1',
                        support: ['pre1']
                    };
                    return _this.sock.send(JSON.stringify(conData));
                };
            })(this);
            this.sock.onmessage = (function (_this) {
                return function (e) {
                    var d;
                    d = JSON.parse(e.data);
                    if (d.msg === 'connected') {
                        _this.isSockReady = true;
                        _this.sockReopenCount = 0;
                        _this.playerId = amplify.store(_this.amplifyKey);
                        if (_this.playerId != null) {
                            return _this.getSetPlayerSendId = _this.sendFunc('setPlayer', [gameId, _this.playerId]);
                        } else {
                            return _this.getSetPlayerSendId = _this.sendFunc('getPlayer', [gameId]);
                        }
                    } else if (d.msg === 'result' && d.id === String(_this.getSetPlayerSendId)) {
                        _this.playerId = d.result;
                        amplify.store(_this.amplifyKey, _this.playerId);
                        return _this.addIFrame();
                    }
                };
            })(this);
            return this.sock.onclose = (function (_this) {
                return function () {
                    _this.isSockReady = false;
                    if (_this.sockReopenCount++ < 3) {
                        return _this.openSock();
                    }
                };
            })(this);
        };

        Leaderboard.closeSock = function () {
            var _ref;
            return (_ref = this.sock) != null ? _ref.close() : void 0;
        };

        Leaderboard.addIFrame = function () {
            if ($('iframe').length <= 0) {
                $('#leaderboard').after('<iframe src="' + this.leaderboardUrl + '?gameId=' + gameId + '&playerId=' + this.playerId + '" style="width:320px;height:520px;border:none"></iframe>');
            }
            return this.isPlayerReady = true;
        };

        Leaderboard.beginGame = function () {
            if (!this.isPlayerReady) {
                return;
            }
            this.sendFunc('beginGame', [gameId, this.playerId]);
            return this.isGameReady = true;
        };

        Leaderboard.setTmpScore = function (score) {
            if (!this.isGameReady) {
                this.beginGame();
            }
            return this.sendFunc('setTmpScore', [this.playerId, score]);
        };

        Leaderboard.setScore = function (score) {
            if (!this.isGameReady) {
                this.beginGame();
            }
            this.isGameReady = false;
            return this.sendFunc('setScore', [gameId, this.playerId, score]);
        };

        Leaderboard.sendFunc = function (funcName, params) {
            var sendObj;
            if (!this.isSockReady) {
                return;
            }
            this.idc++;
            sendObj = {
                msg: 'method',
                method: funcName,
                params: params,
                id: String(this.idc)
            };
            this.sock.send(JSON.stringify(sendObj));
            return this.idc;
        };

        return Leaderboard;

    })();

    Config = (function () {
        function Config() { }

        Config.fps = 60;

        Config.backgroundColor = '#000';

        Config.soundTempo = 140;

        Config.soundVolume = .05;

        Config.title = ['FIGURE OF', 'EIGHT'];

        return Config;

    })();

    initialize = function () {
        //Leaderboard.initialize();
        this.kds = S.i(["sine", 0, 5, 0, .05, 0, .025, 100, 300, 400, -.75, -1, 0, .01, .15, 0, .3, .15, 0, 0, .15, 0, 0, 1, -1, 0, 0, -1]);
        this.sds = S.i(["square", 0, 1, 0, 0, 0, .1, 20, 400, 2000, -1, 0, 0, 0, .5, 0, 0, 0, .5, -.5, 0, 0, .5, 1, 0, 0, .75, -1]);
        this.hds = S.i(["noise", 0, 1, 0, 0, 0, .05, 2400, 2400, 2400, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, -.15, .1, 1, 1, 0, 1, 1]);
        this.cds = S.i(["noise", 0, 1, 0, 0, 0, .1, 1300, 500, 2400, 1, -1, 1, 40, 1, 0, 1, 0, 0, 0, 0, .75, .25, 1, -1, 1, .25, -1]);
        return this.t0ds = S.i(["saw", 0.0000, 2, 0.0000, 0.1340, 0.2910, 0.0040, 45.0000, 809.0000, 2400.0000, -0.9340, 0.0000, 0.0000, 0.0100, 0.0003, 0.0000, 0.0000, 0.0000, 0.5000, -0.3060, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.2770, 0.0000]);
    };

    beginGame = function () {
        return Leaderboard.beginGame();
    };

    endGame = function () {
        return Leaderboard.setScore(G.sc);
    };

    begin = function () {
        var i, _i, _results;
        this.kds.pp('1000100010001000');
        this.sds.pp('0010001000100010');
        this.hds.pp('0001000001000101');
        this.cds.pp('0100000010010000');
        this.t0ds.pp('0000100100101000');
        Bonus.sc = 100;
        En.bCnt = 0;
        new Player;
        if (!G.ig) {
            Player.i.r;
        }
        G.fi.d(function () {
            new En;
            return this.c = (20..rr(40)) / G.df(2);
        }).dr(function () {
            if (--this.c < 0) {
                return this.n;
            }
        });
        _results = [];
        for (i = _i = 1; _i <= 30; i = ++_i) {
            _results.push(new Star);
        }
        return _results;
    };

    update = function () {
        if (G.ig && G.t % 60 === 0) {
            Leaderboard.setTmpScore(G.sc);
        }
        A.sc([Star], 0, .002, 0, 0, -.05, 1.05);
        if (G.ig && G.t === 0) {
            return T.i('[ CLICK / TOUCH ] SLOW DOWN').xy(.1, .1).t(250).al.ao;
        }
    };

    Player = (function (_super) {
        __extends(Player, _super);

        function Player() {
            return Player.__super__.constructor.apply(this, arguments);
        }

        Player.prototype.i = function () {
            return Player.dss = S.i(["square", 0.0000, 3, 0.0130, 1.0440, 2.2830, 0.1440, 2242.0000, 345.0000, 1332.0000, -0.0940, 0.5600, 0.6980, 38.5460, 0.5775, 0.8000, 0.3980, 0.5660, 0.1885, 0.9620, 0.0680, 0.0680, 0.6200, 0.9740, 0.9300, 0.3420, 0.6260, -0.0040]);
        };

        Player.prototype.b = function () {
            Player.i = this;
            this.d.ar(C.ri, .01, this.bd = D.i.ar(C.ri, .01)).ar(C.wi, .03, .05);
            this.wd = D.i.ar(C.ri, .02, .03, .03, .01).ar(C.ri, .02, .03, -.03, .01);
            this.mt = 0;
            this.pp = V.i;
            this.mtv = .01;
            return this.p.xy(.5, .8);
        };

        Player.prototype.u = function () {
            var w;
            w = this.pp.wt(this.p);
            w /= 10;
            this.wd.p(this.p).w(w).d;
            this.bd.p(this.p).d;
            this.pp.v(this.p);
            this.p.xy(sin(this.mt) * .4 + .5, -sin(this.mt * 2) * .15 + .8);
            if (M.ip) {
                this.mtv += (.005 - this.mtv) * .2;
            } else {
                this.mtv += (.033 - this.mtv) * .2;
            }
            this.mt += this.mtv;
            if (this.t % 5 === 0) {
                new Shot(this.p, w);
                new Shot(this.p, w + this.mtv * 1000);
                new Shot(this.p, w - this.mtv * 1000);
            }
            if (this.ih(Blt)) {
                Player.dss.pn;
                this.pi.c(C.ri).sz(.05).s(.05).cn(100);
                this.r;
                return G.eg;
            }
        };

        return Player;

    })(A);

    Shot = (function (_super) {
        __extends(Shot, _super);

        function Shot() {
            return Shot.__super__.constructor.apply(this, arguments);
        }

        Shot.prototype.b = function (p, w) {
            this.w = w;
            this.p.v(p);
            this.d.ar(C.wi, .02, .03, .03, .01).ar(C.wi, .02, .03, -.03, .01);
            return this.s = .025;
        };

        Shot.prototype.u = function () {
            if (!this.p.ii(.05)) {
                return this.r;
            }
        };

        return Shot;

    })(A);

    En = (function (_super) {
        __extends(En, _super);

        function En() {
            return En.__super__.constructor.apply(this, arguments);
        }

        En.bCnt = 0;

        En.prototype.i = function () {
            En.dss = S.i(["noise", 0, 3, 0.0520, 0.2380, 0.4740, 0.8980, 2379.0000, 707.0000, 407.0000, 0.9940, 0.5420, 0.6410, 43.3450, -0.1453, -0.0560, -0.2360, 0.7660, 0.3495, -0.0400, 0.3488, 0.3400, -0.5420, 0.5260, -0.8900, 0.7970, 0.8890, -0.2680]);
            return En.dls = S.i(["noise", 0, 4, 0.0800, 0.3820, 1.5060, 0.6020, 1438.0000, 515.0000, 356.0000, -0.8740, 0.7600, 0.1460, 8.5042, -0.2571, 0.2340, 0.9460, 0.9140, 0.4580, -0.1700, 0.0960, 0.6320, 0.3940, 0.4210, 0.2340, 0.8210, 0.4050, 0.1780]);
        };

        En.prototype.b = function () {
            this.d.ar(C.wi, .03).ars(C.ci, .03, .06, .03, 0).ars(C.ci, .03, .06, -.03, 0);
            this.dd = D.i.ar(C.ri, .07);
            this.p.xy(.1.rr(.9), -(.1.rr(.2)));
            this.shld = 1;
            this.sc = 1;
            this.abs = 0;
            this.bwn = 1;
            this.bww = 0;
            if ((0..rri(9)) === 0) {
                this.shld = 8..rri(15);
                this.sc = 1 + this.shld * .1;
                this.d.sc(this.sc);
                this.dd.sc(this.sc);
                this.bs = .01;
                this.abs = (0..rr(G.df() - 1)) * .002;
                this.bwn = 1..rri((G.df(3) - 1) * 7);
                this.bww = 45..rr(120);
                this.isL = true;
            } else {
                this.bs = (1..rr(G.df())) * .01;
            }
            this.fShld = this.shld;
            return this.fi.d((function (_this) {
                return function () {
                    var i, s, w, _i, _ref, _results;
                    s = _this.bs;
                    _this.bs += _this.abs;
                    w = _this.p.wt(Player.i.p);
                    if (_this.bwn === 1) {
                        return new Blt(_this.p, w, s);
                    } else {
                        w -= _this.bww / 2;
                        _results = [];
                        for (i = _i = 1, _ref = _this.bwn; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
                            new Blt(_this.p, w, s);
                            _results.push(w += _this.bww / (_this.bwn - 1));
                        }
                        return _results;
                    }
                };
            })(this)).w(60 / G.df() / sqrt(this.shld) * sqrt(this.bwn));
        };

        En.prototype.u = function () {
            this.w += 3;
            if (this.t < 60) {
                this.p.y += cos(this.t * PI / 2 / 60) * .01;
            } else if (this.t > 120) {
                this.p.y -= cos((this.t - 120) * PI / 2 / 60) * .01;
                if (this.t > 180) {
                    this.r;
                }
            }
            if (this.ih(Shot, (function (st) {
                return st.r;
            }))) {
                this.dd.p(this.p).d;
                this.pi.c(C.wi).sz(.01 * this.sc);
                if (--this.shld <= 0) {
                    if (this.fShld > 1) {
                        En.dls.pn;
                    } else {
                        En.dss.pn;
                    }
                    if (G.ig) {
                        G.sc += this.fShld * 10;
                    }
                    this.pi.c(C.wi).sz(.02 * this.sc).cn(30);
                    this.r;
                    if (this.fShld > 1 || (++En.bCnt % 7 === 0)) {
                        return new Bonus(this.p);
                    }
                }
            }
        };

        return En;

    })(A);

    Blt = (function (_super) {
        __extends(Blt, _super);

        function Blt() {
            return Blt.__super__.constructor.apply(this, arguments);
        }

        Blt.prototype.i = function () {
            return this.dp(1.5);
        };

        Blt.prototype.b = function (p, w, s) {
            this.p.v(p);
            this.v.aw(w, s);
            this.d.ar(C.ci, .01);
            return this.wd = D.i.ars(C.ci, .03, .06).ar(C.wi, .01);
        };

        Blt.prototype.u = function () {
            this.w += 7;
            this.wd.p(this.p).w(this.w).d;
            if (!this.p.ii(.05)) {
                return this.r;
            }
        };

        return Blt;

    })(A);

    Bonus = (function (_super) {
        __extends(Bonus, _super);

        function Bonus() {
            return Bonus.__super__.constructor.apply(this, arguments);
        }

        Bonus.sc = 100;

        Bonus.prototype.i = function () {
            this.dp(.5);
            return Bonus.gs = S.i(["synth", 0.0000, 5, 0.0610, 0.3900, 1.1280, 0.6080, 155.0000, 359.0000, 294.0000, 0.6660, 0.6880, 0.5850, 9.4640, 0.6503, 0.9920, 0.4560, 0.4920, 0.0785, 0.5840, 0.3320, 0.0760, -0.0140, 0.7180, -0.3820, 0.3350, 0.3850, 0.8680]);
        };

        Bonus.prototype.b = function (p) {
            var i, o, _i;
            this.p.v(p);
            o = V.i.xy(.02);
            for (i = _i = 1; _i <= 4; i = ++_i) {
                this.d.ar(C.ri, .02, .02, o.x, o.y);
                o.rt(90);
            }
            this.sc = Bonus.sc;
            this.d.sc(1 + this.sc / 100 * .2);
            this.v.y = -.02;
            return this.ihc = 0;
        };

        Bonus.prototype.u = function () {
            this.v.y += .001;
            this.v.y *= .95;
            this.w += 7;
            if (G.ig) {
                if (this.ihc > 0) {
                    this.p.aw(this.p.wt(Player.i.p), (this.p.dt(Player.i.p)) * this.ihc * .05);
                    this.ihc++;
                } else if ((this.p.dt(Player.i.p)) < .33) {
                    this.ihc = 1;
                }
            }
            if (this.ih(Player)) {
                Bonus.gs.pn;
                this.ti("+" + this.sc).v(0, -.1).t(60);
                G.sc += this.sc;
                Bonus.sc = (this.sc + 100).c(100, 1000);
                this.r;
            }
            if (this.p.y > 1.1) {
                this.r;
                return Bonus.sc = 100;
            }
        };

        return Bonus;

    })(A);

    Star = (function (_super) {
        __extends(Star, _super);

        function Star() {
            return Star.__super__.constructor.apply(this, arguments);
        }

        Star.prototype.i = function () {
            return this.dp(.25);
        };

        Star.prototype.b = function () {
            this.d.ar(C.wi, .01);
            return this.p.xy(0..rr(1), 0..rr(1));
        };

        return Star;

    })(A);

}).call(this);
